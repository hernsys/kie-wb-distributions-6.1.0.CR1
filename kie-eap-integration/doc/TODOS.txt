- TODOS
    - Dynamic module dependencies
        - Both BPMS/BRMS contains jars in WEB-INF/lib that are in modules, and this modules are not present in the static BPMS/BRMS distribution layer... add them?
            abdera-i18n-1.1.2.jar -> org.apache.abdera
            asm-3.1.jar -> asm / asm.asm
            commons-codec-1.4.jar -> org-apache-commons-codec-main -> Missing eap_61 assembly exclusion
            commons-compress-1.4.1.jar -> org-apache-commons-compress
            commons-exec-1.0.1.jar -> org-apache-commons-exec
            commons-fileupload-1.2.2.jar -> org-apache-commons-fileupload
            commons-httpclient-3.1.jar -> org-apache-commons-httpclient
            commons-io-2.1.jar -> org-apache-commons-io-main
            commons-jxpath-1.3.jar -> org-apache-commons-jxpath
            commons-logging-1.1.1.jar -> org-apache-commons-logging-main -> Missing eap_61 assembly exclusion
            commons-math-2.1.jar -> org-apache-commons-math
            commons-net-2.2.jar -> org-apache-commons-net
            helix-core-0.6.2-incubating.jar -> org-apache-helix
            jakarta-regexp-1.4.jar -> jakarta-regexp
            json-20090211.jar -> org-json
            log4j-1.2.17.jar -> org-apache-log4j-main
            logback-classic-1.0.9.jar -> ch-qos-logback
            logback-core-1.0.9.jar -> ch-qos-logback
            lucene-analyzers-common-4.0.0.jar -> org-apache-lucene
            lucene-codecs-4.0.0.jar -> org-apache-lucene
            lucene-core-4.0.0.jar -> org-apache-lucene
            lucene-queries-4.0.0.jar -> org-apache-lucene
            lucene-queryparser-4.0.0.jar -> org-apache-lucene
            lucene-sandbox-4.0.0.jar -> org-apache-lucene
            mina-core-2.0.4.jar -> org-apache-mina
            netty-4.0.0.Alpha1.errai.r1.jar -> org-jboss-netty
            opencsv-2.3.jar -> net-sf-opencsv
            org.osgi.core-4.2.0.jar -> org-osgi
            rome-1.0.jar -> rome
            scannotation-1.0.3.jar -> org-scannotation-scannotation-main
            snakeyaml-1.8.jar -> org-yaml-snakeyaml-main
            wagon-ahc-1.2.1.jar -> org-apache-maven-wagon
            xmlgraphics-commons-1.4.jar -> org-apache-xmlgraphics
            xmlschema-core-2.0.3.jar -> org-apache-ws-xmlschema-main
         
    - Maven WARNS
        - JBoss modules module -> Some warnings are present:
            [WARNING] Some problems were encountered while building the effective model for org.kie.modules:asm-asm-main:pom:6.1.0-SNAPSHOT
            [WARNING] 'dependencies.dependency.systemPath' for org.jboss.eap-module-base:asm:pom should not point at files within the project directory, ${project.basedir}/src/main/resources/asm-3.3.1-redhat-4.jar-pom.xml will be unresolvable by dependent projects @ line 31, column 23
    - Remove artifact versions from module pom's
        - IP BOM
            - https://github.com/jboss-integration/jboss-integration-platform-bom
            - Do not add all third party library versions there
            - If an artifact version is present, but not the desired one, override it in the kie-parent-with-dependencies.
            - Split the pull requests in several ones...
            - Slot for modules of 3rd party jars should use it's own version, not the project one. (David Ward) - Can use properties defined in IP BOM as module.slot value.
            - https://bugzilla.redhat.com/show_bug.cgi?id=1063602 - keep it in your vision - it's likely xstream will be upgrades very fast, including it's transitive deps xpp3 etc. Make sure your fork doesn't undo that later. (geoffrey)
    - Modules integration with other frameworks
        - Should use a common modules repository? Several frameworks have same modules..
        - All third party jars should be in a single module?
            - for example, we can use xmlpull:xmlpull:jar and xpp3:xpp3_min:jar in same static module.
        - David Loyd (#droolsdev)
            - He knows a lot about modules
            - Ask who can help me
        - SW -> Horia Chierean / David Ward
    - BZs
        - https://bugzilla.redhat.com/show_bug.cgi?id=1039716 -> Modules refactor (maven plugin)
    - Unit tests for Mojo classes
    
- Other TODOS
    - Dependency builder issues
        - Base modules: The current impl considers that all base dependencies are not exported, but some of them are exported (export=true)
        - If a static module definition contains an exported (forced export=true) dependency, flat dependency builder impl must detect it and do not re-export it in parent dependant modules.
    - Maven 3.1.X support
    - Change module dependencies from optional=true to scope=provided in static modules definitions??


